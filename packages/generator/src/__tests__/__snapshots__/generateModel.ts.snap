// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generateModel given a string type for a primary key given a postgres connector given an @id @db.Uuid primary key should generate a model with \`Guid\` for the primary key 1`] = `
"using System;
using System.Net;
using System.Collections;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Foo {
  [Table(\\"pg_db_uuid_type\\")]
  public class PostgresDbUuidType {
    [Key, Required, Column]
    public Guid id { get; set; }
    [Required, Column]
    public int data { get; set; }
  }
}"
`;

exports[`generateModel given a string type for a primary key given a sqlserver connector given an @id @db.UniqueIdentifier primary key should generate a model with \`Guid\` for the primary key 1`] = `
"using System;
using System.Net;
using System.Collections;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Foo {
  [Table(\\"sqlserver_db_uuid_type\\")]
  public class SqlServerDbUuidType {
    [Key, Required, Column]
    public Guid id { get; set; }
    [Required, Column]
    public int data { get; set; }
  }
}"
`;

exports[`generateModel given a string type for a primary key otherwise should have a string primary key 1`] = `
"using System;
using System.Net;
using System.Collections;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Foo {
  [Table(\\"sqlite_text_uuid_type\\")]
  public class SqliteTextUuidType {
    [Key, Required, Column]
    public string id { get; set; }
    [Required, Column]
    public int data { get; set; }
  }
}"
`;

exports[`generateModel given a string type for a primary key otherwise should have a string primary key 2`] = `
"using System;
using System.Net;
using System.Collections;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Foo {
  [Table(\\"sqlserver_text_uuid_type\\")]
  public class SqlServerTextUuidType {
    [Key, Required, Column]
    public string id { get; set; }
    [Required, Column]
    public int data { get; set; }
  }
}"
`;

exports[`generateModel given a string type for a primary key otherwise should have a string primary key 3`] = `
"using System;
using System.Net;
using System.Collections;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Foo {
  [Table(\\"pg_text_uuid_type\\")]
  public class PostgresTextUuidType {
    [Key, Required, Column]
    public string id { get; set; }
    [Required, Column]
    public int data { get; set; }
  }
}"
`;

exports[`generateModel should generate Table names based on the @@map attribute or simply based on the model 1`] = `
"using System;
using System.Net;
using System.Collections;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Foo {
  [Table(\\"NoAtAtMapAttribute\\")]
  public class NoAtAtMapAttribute {
    [Key, Required, Column]
    public int id { get; set; }
  }
}"
`;

exports[`generateModel should generate the source text for a model 1`] = `
Array [
  "using System;
using System.Net;
using System.Collections;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace ProcessingFramework {
  [Table(\\"user\\")]
  public class User {
    [Key, Required, Column]
    public int id { get; set; }
    [Required, Column]
    public string email { get; set; }
    [Column]
    public string name { get; set; }
    public ICollection<Post> posts { get; set; }
    public ICollection<Comment> comment { get; set; }
  }
}",
  "using System;
using System.Net;
using System.Collections;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace ProcessingFramework {
  [Table(\\"post\\")]
  public class Post {
    [Key, Required, Column]
    public int id { get; set; }
    [Required, Column]
    public string content { get; set; }
    [Required, Column(\\"created_at\\")]
    public DateTime createdAt { get; set; }
    [ForeignKey(\\"createdBy\\")]
    [Required, Column(\\"creator_id\\")]
    public int creatorId { get; set; }
    public User createdBy { get; set; }
    public ICollection<Comment> comment { get; set; }
  }
}",
  "using System;
using System.Net;
using System.Collections;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace ProcessingFramework {
  [Table(\\"comment\\")]
  public class Comment {
    [Key, Required, Column]
    public int id { get; set; }
    public Post post { get; set; }
    public User creator { get; set; }
    [ForeignKey(\\"post\\")]
    [Required, Column(\\"post_id\\")]
    public int postId { get; set; }
    [ForeignKey(\\"creator\\")]
    [Required, Column(\\"creator_id\\")]
    public int creatorId { get; set; }
  }
}",
]
`;
